pipeline {
   agent any
      environment {
       select_docker_registry = "${env.DEFAULT_REGISTRY}"
       registryCredId = "DOCKER_REGISTRY_CREDENTIALS"
       selected_environment = "10.148.240.58"
       opensource_environment = "10.148.240.58"
       credId= "SSH_10.148.240.58"
       opensourcecredId = "SSH_10.148.240.68"
       awss3credentialsid = "AWS_S3_CREDENTIALS"
       }
   parameters {
              gitParameter defaultValue: 'origin/develop', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'
   }
   stages {
     stage('Checkout') {
          steps {
            checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/PublicisSapient/PSknowHOW.git',credentialsId: 'githubcred']], branches: [[name: '${SBRANCH}']]], poll: false
          }
        }
     stage('Capture Version') {
          steps {
                script {
                       def pom = readMavenPom file: 'pom.xml'
                       env.version = pom.version
                       echo "${pom.version}"
                }
           }
      }

     stage('Checking if there are any commits in last 24 hrs ') {
          steps {
                script {

                def uifoldercommits = sh (script: 'git log --since="24 hours ago" -- UI', returnStdout: true)
                    if (uifoldercommits.isEmpty()) {
                        env.uistatus = true
                      echo "There are no commits in UI folder for last 24 hrs "
                      }else{
                        env.uistatus = false
                        echo "There are some commits in UI folder for last 24 hrs"
                      }

                def customapifoldercommits = sh (script: 'git log --since="24 hours ago" -- customapi', returnStdout: true)
                      if (customapifoldercommits.isEmpty()) {
                        env.customapistatus = true
                      echo "There are no commits in Customapi folder for last 24 hrs "
                      }else{
                        env.customapistatus = false
                        echo "There are some commits in Customapi folder for last 24 hrs"
                      }

                def processorfoldercommits = sh (script: 'git log --since="24 hours ago" -- processors', returnStdout: true)
                      if (processorfoldercommits.isEmpty()) {
                        env.processorstatus = true
                      echo "There are no commits in processor folder for last 24 hrs "
                      }else{
                        env.processorstatus = false
                        echo "There are some commits in processor folder for last 24 hrs"
                      }
                def mongodbfoldercommits = sh (script: 'git log --since="24 hours ago" -- mongodb', returnStdout: true)
                      if (mongodbfoldercommits.isEmpty()) {
                        env.mongodbstatus = true
                      echo "There are no commits in mongodb folder for last 24 hrs "
                      }else{
                        env.mongodbstatus = false
                        echo "There are some commits in mongodb folder for last 24 hrs"
                      }
                    
                }
           }
      }
	 stage('Building UI Packages') {
        when{
                   expression { env.uistatus == 'false' }
         }
        steps {
            script{
                echo "status is ${env.uistatus}"
            }
              sh """
                    cd UI/
                    npm install
                    npm install -g @angular/cli@11.0.2
                    ng build --configuration=docker

                    mkdir -p build
                    cp -r dist/dashboard/* build/
                    chmod -R 775 build
                    cd build
                    tar -czvf ui2.tar *
                    mv ui2.tar ../files
                    rm -rf build
				      """
            }
     }
     stage('Building UI Docker Image') {
        when{
                   expression { env.uistatus == 'false' }
         }
        steps {
                sh """
                cd UI
                docker build -t ui:${env.version} .
                """
        }
     }

     stage('Pushing UI Docker image to Registry') {
        when{
                   expression { env.uistatus == 'false' }
         }
         steps {
                withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                 sh """
                                    docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                    docker tag ui:${env.version} ${env.select_docker_registry}/speedy/ui:${env.version}
                                    docker push ${env.select_docker_registry}/speedy/ui:${env.version}
                                    docker logout ${env.select_docker_registry}
                                 """
                }
         }
     }
      stage('Building CUSTOMAPI skipping Unit Test') {
           when{
                   expression { env.customapistatus == 'false' }
         }
            steps {

                sh """
                mvn clean install -DskipTests -Pcustomapi
                """
            }
         }
      stage('Push API Docker image to Registry') {
            when{
                expression { env.customapistatus == 'false' }
         }
         steps {
              withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
              sh """
                    docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                    docker tag customapi:${env.version} ${env.select_docker_registry}/speedy/customapi:${env.version}
                    docker push ${env.select_docker_registry}/speedy/customapi:${env.version}
                    docker logout ${env.select_docker_registry}
                """
              }
          }
      }
         stage('Building Mongodb Docker image') {
           when{
                   expression { env.mongodbstatus == 'false' }
         }
            steps {

                sh """
                cd mongodb
                docker build -t mongodb:${env.version} .
                """
            }
         }
            stage('Push mongodb image ') {
              when {
                 expression { env.mongodbstatus == 'false' }
              }
              steps {
                  withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                        sh """
                        docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                        docker tag mongodb:${env.version} ${env.select_docker_registry}/speedy/mongodb:${env.version}
                        docker push ${env.select_docker_registry}/speedy/mongodb:${env.version}
                        docker logout ${env.select_docker_registry}
                        """
                }
              }
        }

        stage('Building Jira Processor skipping Unit Test') {
            when{
                expression { env.processorstatus == 'false' }
         }
             steps {
                sh "mvn clean install -DskipTests -PjiraProcessor"
             }
        }
		stage('Building Azure Processor skipping Unit Test') {
            when{
                expression { env.processorstatus == 'false' }
         }
             steps {
                sh "mvn clean install -DskipTests -PazureProcessor"
             }
        }
        stage('Building Non Jira Processor skipping Unit Test') {
            when{
                expression { env.processorstatus == 'false' }
         }
             steps {
                sh "mvn clean install -DskipTests -PnonJiraProcessor"
             }
        }

		stage('Building Non Azure Boards Processor skipping Unit Test') {
            when{
                expression { env.processorstatus == 'false' }
         }
             steps {
                sh "mvn clean install -DskipTests -PnonAzureBoardsProcessor"
             }
        }
        stage('Pushing Jira Processors image ') {
            when{
                expression { env.processorstatus == 'false' }
         }
            steps {
                   withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                          sh """
                                docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                docker tag jira-processor:${env.version} ${env.select_docker_registry}/speedy/jira-processor:${env.version}
                                docker push ${env.select_docker_registry}/speedy/jira-processor:${env.version}
                                docker logout ${env.select_docker_registry}
                            """
                  }
            }
        }
		stage('Push Azure Processors Image') {
            when{
                expression { env.processorstatus == 'false' }
         }
            steps {
                   withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                          sh """
                                docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                docker tag azure-processor:${env.version} ${env.select_docker_registry}/speedy/azure-processor:${env.version}
                                docker push ${env.select_docker_registry}/speedy/azure-processor:${env.version}
                                docker logout ${env.select_docker_registry}
                            """
                  }
            }
        }
        stage('Push Non Jira Processors Image') {
            when{
                expression { env.processorstatus == 'false' }
         }
               steps {
                      withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                         sh """
                                               docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                               docker tag nonjira-processor:${env.version} ${env.select_docker_registry}/speedy/nonjira-processor:${env.version}
                                               docker push ${env.select_docker_registry}/speedy/nonjira-processor:${env.version}
                                               docker logout ${env.select_docker_registry}
                                           """
                      }
               }
        }
		stage('Push Non Azure Boards Processors Image') {
            when{
                expression { env.processorstatus == 'false' }
         }
               steps {
                      withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                         sh """
                                               docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                               docker tag nonazureboards-processor:${env.version} ${env.select_docker_registry}/speedy/nonazureboards-processor:${env.version}
                                               docker push ${env.select_docker_registry}/speedy/nonazureboards-processor:${env.version}
                                               docker logout ${env.select_docker_registry}
                                           """
                      }
               }
        }
     stage('Deploying Application to 58 Server with PS DB') {
           when{
                expression { env.processorstatus == 'false' || env.customapistatus == 'false' || env.uistatus == 'false' || env.mongodbstatus == 'false' }
         }
          steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding', credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']])
                 {
                              sh """
                                 > /tmp/ui_hosts
                                 echo "[server]" > /tmp/ui_hosts
                                 echo " ${env.selected_environment}" >> /tmp/ui_hosts
                                 cd ansible_deployment/
                                 ansible-playbook -i /tmp/ui_hosts playbooks/deploy.yaml -e 'edcurl=${edcurl}' -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'ldapurl=${ldapurl}' -e 'DNS_NAME=${env.selected_environment}' -e 'DEPLOY=OPENSOURCE' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'select_docker_registry=${DEFAULT_REGISTRY}' -e 'version=${env.version}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}'
                              """
                }
            }
     }
     stage('Deploying Application to 68 Server with OPEN SOURCE DB') {
           when{
                expression { env.processorstatus == 'false' || env.customapistatus == 'false' || env.uistatus == 'false' || env.mongodbstatus == 'false' }
         }
          steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding', credentialsId: env.opensourcecredId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']])
                 {
                              sh """
                                 > /tmp/ui_hosts
                                 echo "[server]" > /tmp/ui_hosts
                                 echo " ${env.selected_environment}" >> /tmp/ui_hosts
                                 cd ansible_deployment/
                                 ansible-playbook -i /tmp/ui_hosts playbooks/deploy.yaml -e 'edcurl=${edcurl}' -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'ldapurl=${ldapurl}' -e 'DNS_NAME=${env.selected_environment}' -e 'DEPLOY=PS-INTERNAL' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.opensource_environment}' -e 'select_docker_registry=${DEFAULT_REGISTRY}' -e 'version=${env.version}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}'
                              """
                }
            }
     }
   }
}
