pipeline {
   agent any
   options {
        ansiColor('xterm')
    }
   environment {
       awss3credentialsid = "AWS_S3_CREDENTIALS"
       awss3buckitname = "${env.S3_BUCKIT_NAME}"
       select_docker_registry = "${env.DEFAULT_REGISTRY}"
       registryCredId = "DOCKER_REGISTRY_CREDENTIALS"
       }
   parameters {
                 gitParameter defaultValue: 'origin/develop', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'
                 booleanParam(name: 'BUILD', defaultValue: 'true', description: 'BUILD')
                 booleanParam(name: 'SKIP_UNIT_TEST', defaultValue: 'false', description: 'SKIP UNIT TEST Cases')
                 booleanParam(name: 'SONAR', defaultValue: 'true', description: 'SONAR')
                 booleanParam(name: 'PUSH_REGISTRY', defaultValue: 'false', description: 'PUSH_REGISTRY')
                 booleanParam(name:'SCAN_DOCKER_IMAGE', defaultValue: 'false', description: 'SCAN-Docker-image')
                 choice(name: 'DEPLOY', choices: ['', 'OPENSOURCE', 'PS-INTERNAL'], description: '')
            	 string(name: 'DNS_NAME', defaultValue: '', description: 'enter DNS name if present')
   }
   stages {
        stage('Select Environment') {
            when{
                expression { env.DEPLOY }
            }
            steps {
                      script {
                        def SERVER_LIST=[]
                        def buildStages = env.getEnvironment()
                        for (builds in buildStages) {
                            if(builds.key.startsWith("SERVER_")) {
                              SERVER_LIST.add(builds.value)
                            }
                        }
                        env.selected_environment = input  message: 'Select environment ',ok : 'Proceed',id :'tag_id',
                        parameters:[choice(choices: SERVER_LIST, description: 'Select environment', name: 'env')]
                        echo "Deploying ${env.selected_environment}."
                        env.credid = "SSH_"+env.selected_environment
                      }
            }
        }
        stage('Checkout') {
          steps {
            checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/PublicisSapient/PSknowHOW.git',credentialsId: 'githubcred']], branches: [[name: '${SBRANCH}']]], poll: false
          }
        }
        stage('Capture Version') {
                  steps {
                        script {
                               def pom = readMavenPom file: 'pom.xml'
                               env.version = pom.version
                               echo "${pom.version}"
                               echo "${env.version}"
                        }
                   }
        }
        stage('Build Jira Processor skipping Unit Test') {
             when {
                   expression { env.BUILD == 'true' }
                   expression { env.SKIP_UNIT_TEST == 'true' }
             }
             steps {
                sh "mvn clean install -DskipTests -PjiraProcessor"
             }
        }
        stage('Build Jira Processor run Unit Test') {
             when {
                   expression { env.BUILD == 'true' }
                   expression { env.SKIP_UNIT_TEST == 'false' }
             }
             steps {
                sh "mvn clean install -PjiraProcessor"
             }
        }
        stage('Push Jira Processors ') {
             when {
                  expression { env.PUSH_REGISTRY == 'true' }
              }
            steps {
                   withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                          sh """
                                docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                docker tag jira-processor:${env.version} ${env.select_docker_registry}/speedy/jira-processor:${env.version}
                                docker push ${env.select_docker_registry}/speedy/jira-processor:${env.version}
                                echo "${env.select_docker_registry}/speedy/jira-processor:${env.version}" ${WORKSPACE}/processors/jira/Dockerfile >> processor_images
                                docker logout ${env.select_docker_registry}
                            """
                  }
            }
        }
        stage('Build Non Jira Processor skipping Unit Test') {
             when {
                expression { env.BUILD == 'true' }
                expression { env.SKIP_UNIT_TEST == 'true' }
             }
             steps {
                sh "mvn clean install -DskipTests -PnonJiraProcessor"
             }
        }
        stage('Build Non Jira Processor run Unit Test') {
             when {
                expression { env.BUILD == 'true' }
                expression { env.SKIP_UNIT_TEST == 'false' }
             }
             steps {
                sh "mvn clean install -PnonJiraProcessor"
             }
        }
        stage('Push Non Jira Processors ') {
               when {
                   expression { env.PUSH_REGISTRY == 'true' }
               }
               steps {
                      withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                         sh """
                                               docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                               docker tag nonjira-processor:${env.version} ${env.select_docker_registry}/speedy/nonjira-processor:${env.version}
                                               docker push ${env.select_docker_registry}/speedy/nonjira-processor:${env.version}
                                               echo "${env.select_docker_registry}/speedy/nonjira-processor:${env.version}" ${WORKSPACE}/Dockerfile >> processor_images
                                               docker logout ${env.select_docker_registry}
                                           """
                      }
               }
        }
		stage('Build Azure Processor skipping Unit Test') {
             when {
                   expression { env.BUILD == 'true' }
                   expression { env.SKIP_UNIT_TEST == 'true' }
             }
             steps {
                sh "mvn clean install -DskipTests -PazureProcessor"
             }
        }
        stage('Build Azure Processor run Unit Test') {
             when {
                   expression { env.BUILD == 'true' }
                   expression { env.SKIP_UNIT_TEST == 'false' }
             }
             steps {
                sh "mvn clean install -PazureProcessor"
             }
        }

		stage('Build Non Azure Boards Processor skipping Unit Test') {
             when {
                expression { env.BUILD == 'true' }
                expression { env.SKIP_UNIT_TEST == 'true' }
             }
             steps {
                sh "mvn clean install -DskipTests -PnonAzureBoardsProcessor"
             }
        }
        stage('Build Non Azure Boards Processor run Unit Test') {
             when {
                expression { env.BUILD == 'true' }
                expression { env.SKIP_UNIT_TEST == 'false' }
             }
             steps {
                sh "mvn clean install -PnonAzureBoardsProcessor"
             }
        }		
        stage('CodeAnalysis'){
	    when{
            expression { env.SONAR == 'true' }
        }
          steps{
	        withSonarQubeEnv( 'Sonar2') {
			  sh """
			  mvn sonar:sonar -Dsonar.projectKey=ENGINEERING.KPIDASHBOARD.PROCESSORS -Dsonar.projectName=ENGINEERING.KPIDASHBOARD.PROCESSORS -Dsonar.branch.name=${SBRANCH} -f processors/pom.xml
              """
                        }
                       } 
		      }
        
	stage('Check Quality gates '){
            when{
            expression { env.SONAR == 'true' }
        }
          steps{
                          sh """
                          chmod +x SonarDelay.sh
                          ./SonarDelay.sh ./processors/target/sonar/report-task.txt $sonarpass $sonarurl
			  """
			  }
			  }

		stage('Push Azure Processors ') {
             when {
                  expression { env.PUSH_REGISTRY == 'true' }
              }
            steps {
                   withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                          sh """
                                docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                docker tag azure-processor:${env.version} ${env.select_docker_registry}/speedy/azure-processor:${env.version}
                                docker push ${env.select_docker_registry}/speedy/azure-processor:${env.version}
                                echo "${env.select_docker_registry}/speedy/azure-processor:${env.version}" ${WORKSPACE}/processors/azure/azure-boards/Dockerfile >> processor_images
                                docker logout ${env.select_docker_registry}
                            """
                  }
            }
        }

		stage('Push Non Azure Boards Processors ') {
               when {
                   expression { env.PUSH_REGISTRY == 'true' }
               }
               steps {
                      withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                         sh """
                                               docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                               docker tag nonazureboards-processor:${env.version} ${env.select_docker_registry}/speedy/nonazureboards-processor:${env.version}
                                               docker push ${env.select_docker_registry}/speedy/nonazureboards-processor:${env.version}
                                               echo "${env.select_docker_registry}/speedy/nonazureboards-processor:${env.version}" ${WORKSPACE}/processors/nonazureboards_combined_processor_docker/Dockerfile >> processor_images
                                               docker logout ${env.select_docker_registry}
                                           """
                      }
               }
        }
        stage('Scanning Docker image') {
        when{
            expression { env.SCAN_DOCKER_IMAGE == 'true' }
         }
         steps {
              script{
                anchore engineCredentialsId: 'Anchore-Cred', engineurl: 'http://172.19.0.6:8228/v1', forceAnalyze: true, name: 'processor_images'
              }
          }
      }
      stage('Uploading Docker scan report to s3') {
        when{
            expression { env.SCAN_DOCKER_IMAGE == 'true' }
         }
         steps {
               withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
              {
                sh """
                 aws s3 sync ${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/archive/AnchoreReport.${JOB_NAME}_${BUILD_NUMBER}/ s3://${awss3buckitname}/ImageScanReport/knowhow-${JOB_NAME}/${env.version}/
			  """
              }
         }
      }
        stage('Deploy') {
                when{
                  expression { env.DEPLOY }
                }
                steps {
                  withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding', credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']])
                    {
                     sh """
                      > /tmp/processor_hosts
                      echo "[server]" > /tmp/processor_hosts
                      echo " ${env.selected_environment}" >> /tmp/processor_hosts
                      cd ansible_deployment/
                      ansible-playbook -i /tmp/processor_hosts playbooks/deploy.yaml -e 'DEPLOY=${DEPLOY}' -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'edcurl=${edcurl}' -e 'ldapurl=${ldapurl}' -e 'DNS_NAME=${DNS_NAME}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'select_docker_registry=${DEFAULT_REGISTRY}' -e 'version=${env.version}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}'
                     """
                  }
                }
        }
        stage('notification') {
                when{
                    expression { env.NOTIFICATION == 'true' }
                }
                steps {
                      sh 'echo TODO NOTIFICATION'
                }
        }
    }
}

