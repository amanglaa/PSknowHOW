pipeline {
   agent any
   options {
        ansiColor('xterm')
    }
    environment {
       awss3credentialsid = "AWS_S3_CREDENTIALS"
       awss3buckitname = "${env.S3_BUCKIT_NAME}"
       select_docker_registry = "${env.DEFAULT_REGISTRY}"
       registryCredId = "DOCKER_REGISTRY_CREDENTIALS"
       }
   parameters {
                 gitParameter defaultValue: 'origin/master', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'
	               booleanParam(name: 'BUILD_IMAGE', defaultValue: 'false', description: 'BUILD_IMAGE')
                 booleanParam(name: 'PUSH_REGISTRY', defaultValue: 'false', description: 'PUSH_REGISTRY')
                 
   }
   stages {
        stage('Checkout') {
             steps {
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/PublicisSapient/PSknowHOW.git',credentialsId: 'githubcred']], branches: [[name: '${SBRANCH}']]], poll: false

             }
        }
        stage('Capture Version') {
             steps {
                  script {
                               def pom = readMavenPom file: 'pom.xml'
                               env.version = pom.version
                               echo "${pom.version}"
                               echo "${env.version}"
                  }
             }
        }
	stage('Build Kafka and zookeeper Image') {
             when {
                   expression { env.BUILD_IMAGE == 'true' }
             }
             steps {
                sh """
		docker pull zookeeper:3.8.0
    docker pull bitnami/kafka:3.2.1
                """
            }
        }
        stage('Push Registry') {
              when {
                 expression { env.PUSH_REGISTRY == 'true' }
              }
              steps {
                  withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                                   sh """
                                                         docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                                         docker tag zookeeper:3.8.0 ${env.select_docker_registry}/speedy/zookeeper:${env.version}
                                                         docker push ${env.select_docker_registry}/speedy/zookeeper:${env.version}
                                                         docker tag bitnami/kafka:3.2.1 ${env.select_docker_registry}/speedy/kafka:${env.version}
                                                         docker push ${env.select_docker_registry}/speedy/kafka:${env.version}
                                                         echo "${env.select_docker_registry}/speedy/kafka:${env.version}" >> kafka_zookeeper_images
                                                         echo "${env.select_docker_registry}/speedy/zookeeper:${env.version}" >> kafka_zookeeper_images
                                                         docker logout ${env.select_docker_registry}
                                                   """
                }
              }
        }
      stage('Scanning Docker image') {
        when{
            expression { env.SCAN_DOCKER_IMAGE == 'true' }
         }
         steps {
              script{
                anchore bailOnFail: false, bailOnPluginFail: false, engineCredentialsId: 'Anchore-Cred', engineurl: 'http://172.19.0.6:8228/v1', forceAnalyze: true, name: 'kafka_zookeeper_images'
              }
          }
      }
      stage('Uploading Docker scan report to s3') {
        when{
            expression { env.SCAN_DOCKER_IMAGE == 'true' }
         }
         steps {
               withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
              {
                sh """
                 aws s3 sync ${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/archive/AnchoreReport.${JOB_NAME}_${BUILD_NUMBER}/ s3://${awss3buckitname}/ImageScanReport/knowhow-${JOB_NAME}/${env.version}/
			  """
              }
         }
      }
	}
}
