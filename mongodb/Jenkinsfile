pipeline {
   agent any
   options {
        ansiColor('xterm')
    }
   environment {
       awss3credentialsid = "AWS_S3_CREDENTIALS"
       awss3buckitname = "${env.S3_BUCKIT_NAME}"
       select_docker_registry = "${env.DEFAULT_REGISTRY}"
       registryCredId = "DOCKER_REGISTRY_CREDENTIALS"
       }
   parameters {
                 gitParameter defaultValue: 'origin/master', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'
                 booleanParam(name: 'BUILD_IMAGE', defaultValue: 'true', description: 'BUILD_IMAGE')
                 booleanParam(name: 'PUSH_REGISTRY', defaultValue: 'true', description: 'PUSH_REGISTRY')
                 booleanParam(name:'SCAN_DOCKER_IMAGE', defaultValue: 'false', description: 'SCAN-Docker-image')
                 choice(name: 'DEPLOY', choices: ['', 'OPENSOURCE', 'PS-INTERNAL'], description: '')
                 string(name: 'DNS_NAME', defaultValue: '', description: 'enter DNS name if present')
   }
   stages {
        stage('Select Environment') {
                    when{
                        expression { env.DEPLOY }
                    }
                    steps {
                              script {
                                def SERVER_LIST=[]
                                def buildStages = env.getEnvironment()
                                for (builds in buildStages) {
                                    if(builds.key.startsWith("SERVER_")) {
                                      SERVER_LIST.add(builds.value)
                                    }
                                }
                                env.selected_environment = input  message: 'Select environment ',ok : 'Proceed',id :'tag_id',
                                parameters:[choice(choices: SERVER_LIST, description: 'Select environment', name: 'env')]
                                echo "Deploying ${env.selected_environment}."
                                env.credid = "SSH_"+env.selected_environment
                              }
                    }
        }
        stage('Checkout') {
             steps {
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/PublicisSapient/PSknowHOW.git',credentialsId: 'githubcred']], branches: [[name: '${SBRANCH}']]], poll: false

             }
        }
        stage('Capture Version') {
             steps {
                  script {
                               def pom = readMavenPom file: 'pom.xml'
                               env.version = pom.version
                               echo "${pom.version}"
                               echo "${env.version}"
                  }
             }
        }
        stage('Build Image') {
             when {
                   expression { env.BUILD_IMAGE == 'true' }
             }
             steps {
                sh """
                    cd mongodb
                    pwd
                    docker build -t mongodb:${env.version} .
                    cd ..
                """
            }
        }
        stage('Push Registry') {
              when {
                 expression { env.PUSH_REGISTRY == 'true' }
              }
              steps {
                  withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                                   sh """
                                                                              docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                                                              docker tag mongodb:${env.version} ${env.select_docker_registry}/speedy/mongodb:${env.version}
                                                                              docker push ${env.select_docker_registry}/speedy/mongodb:${env.version}
                                                                              echo "${env.select_docker_registry}/speedy/mongodb:${env.version}" ${WORKSPACE}/mongodb/Dockerfile > mongodb_images
                                                                              docker logout ${env.select_docker_registry}
                                                   """
                }
              }
        }
        stage('Scanning Docker image') {
        when{
            expression { env.SCAN_DOCKER_IMAGE == 'true' }
         }
         steps {
              script{
                anchore bailOnFail: false, bailOnPluginFail: false, engineCredentialsId: 'Anchore-Cred', engineurl: 'http://172.19.0.6:8228/v1', forceAnalyze: true, name: 'mongodb_images'
              }
          }
      }
      stage('Uploading Docker scan report to s3') {
        when{
            expression { env.SCAN_DOCKER_IMAGE == 'true' }
         }
         steps {
               withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
              {
                sh """
                 aws s3 sync ${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/archive/AnchoreReport.${JOB_NAME}_${BUILD_NUMBER}/ s3://${awss3buckitname}/ImageScanReport/knowhow-${JOB_NAME}/${env.version}/
			  """
              }
         }
      }
        stage('Deploy') {
            when{
                  expression { env.DEPLOY }
            }
            steps {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding', credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']])
                {
                                                               sh """
                                                                   > /tmp/mongodb_hosts
                                                                   echo "[server]" > /tmp/mongodb_hosts
                                                                   echo " ${env.selected_environment}" >> /tmp/mongodb_hosts
                                                                   cd ansible_deployment/
                     ansible-playbook -i /tmp/mongodb_hosts playbooks/deploy.yaml -e 'DEPLOY=${DEPLOY}' -e 'DNS_NAME=${DNS_NAME}' -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'select_docker_registry=${DEFAULT_REGISTRY}' -e 'edcurl=${edcurl}' -e 'ldapurl=${ldapurl}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'version=${env.version}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}'
                                                               """
                    }

            }
        }
    }
}
