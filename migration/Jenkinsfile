pipeline {
   agent any
   options {
        ansiColor('xterm')
        timeout(time: 50, unit: 'MINUTES')
    }
   environment {
       awss3credentialsid = "AWS_S3_CREDENTIALS"
       }
   parameters {
              gitParameter defaultValue: 'origin/master', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'
              booleanParam(name: 'CHOOSE_DEFAULT_REGISTRY', defaultValue: 'false', description: 'CHOOSE_DEFAULT_REGISTRY')
              booleanParam(name: 'API_DEPLOYMENT', defaultValue: 'false', description: 'API_DEPLOYMENT')
              booleanParam(name: 'PUSH_REGISTRY', defaultValue: 'false', description: 'PUSH_REGISTRY')
              booleanParam(name: 'DEPLOY', defaultValue: 'false', description: 'DEPLOY')
              string(name: 'SERVER_USER', defaultValue: '', description: 'SERVER_USER')
              string(name: 'SERVER_IP', defaultValue: '', description: 'SERVER_IP')
              string(name: 'BUILDTYPE', defaultValue: '', description: 'BUILDTYPE')
              string(name: 'SERVER_ROLE', defaultValue: '', description: 'SERVER_ROLE')
              string(name: 'FOLDER_PATH', defaultValue: '', description: 'FOLDER_PATH')
              string(name: 'VERTICALS', defaultValue: '', description: 'VERTICALS')
              string(name: 'SERVER_PASSWORD', defaultValue: '', description: 'SERVER_PASSWORD')
              string(name: 'CERT_PATH', defaultValue: '', description: 'CERT_PATH')
              string(name: 'VERSION', defaultValue: '', description: 'VERSION')
              string(name: 'FROMVERSION', defaultValue: '', description: 'FROMVERSION')
	      string(name: 'DNS_NAME', defaultValue: '', description: 'enter DNS name if present')
	      booleanParam(name: 'MONGO_CONNECTION', defaultValue: 'false', description: 'If you want to have connection with mongo externally check this . NOTE: Check only for dev servers')
   }
   stages {
      stage("API Params") {
        steps {

            script {
                env.CHECKOUT='true'
                env.REGISTRY_REPOSITORY='speedy'
                env.SERVER_USER_DETAILS=params.SERVER_USER
                println("env.SBRANCH:::"+env.SBRANCH)
                println("CHOOSE_DEFAULT_REGISTRY::"+env.CHOOSE_DEFAULT_REGISTRY)
                println("PUSH_REGISTRY:::"+env.PUSH_REGISTRY)
                println("API_DEPLOYMENT:::"+params.API_DEPLOYMENT)
                println("SERVER_IP:::"+params.SERVER_IP)
                println("BUILDTYPE:::"+params.BUILDTYPE)
                println("SERVER_USER:::"+params.SERVER_USER)
                println("SERVER_USER_DETAILS:::"+params.SERVER_USER_DETAILS)
                println("IS_CONSUMER_ROLE::::"+params.IS_CONSUMER_ROLE)
                println("SERVER_ROLE::::"+params.SERVER_ROLE)
                println("FOLDER_PATH:::"+params.FOLDER_PATH)
                println("VERTICALS:::"+params.VERTICALS)
                println("CERT_PATH::"+params.CERT_PATH)
                println("SERVER_PASSWORD::"+params.SERVER_PASSWORD)
                println("VERSION::"+params.VERSION)
                println("FROMVERSION::"+env.FROMVERSION)
            }
        }
      }
      stage('Select docker registry') {

         when {
              expression { env.DEPLOY == 'true' || env.PUSH_REGISTRY == 'true' || env.CHOOSE_DEFAULT_REGISTRY == 'true' }
         }
         steps {
              script {

                      if(env.CHOOSE_DEFAULT_REGISTRY == 'true') {

                            def buildStages = env.getEnvironment()
                            def defaultRegistry
                            for (builds in buildStages) {
                                if(builds.key.startsWith("DEFAULT_REGISTRY")) {
                                  defaultRegistry = builds.value
                                }
                            }
                            env.select_docker_registry = defaultRegistry
                            env.registryCredId="REGISTRY_"+defaultRegistry

                        } else {
                            def REGISTRY_LIST = []
                            def buildStages = env.getEnvironment()
                            for (builds in buildStages) {
                                if(builds.key.startsWith("REGISTRY_")) {
                                  REGISTRY_LIST.add(builds.value)
                                }

                                if(builds.key.startsWith("DEFAULT_REGISTRY")) {
                                  REGISTRY_LIST.add(builds.value)
                                }

                            }
                            env.select_docker_registry = input  message: 'Select docker registry ',ok : 'Proceed',id :'tag_id',
                            parameters:[choice(choices: REGISTRY_LIST, description: 'Select docker registry', name: 'dockerregistry')]
                            env.registryCredId="REGISTRY_"+env.select_docker_registry
                        }
                        echo "Selected Registry is ${env.select_docker_registry}"

              }
         }
      }
      stage('Select Environment') {
         when {
             expression { env.DEPLOY == 'true' }
         }
         steps {
              script {

                if( params.API_DEPLOYMENT == true) {
                    env.selected_environment = params.SERVER_IP
                } else {

                    def SERVER_LIST=[]
                    def buildStages = env.getEnvironment()
                    for (builds in buildStages) {
                        if(builds.key.startsWith("SERVER_")) {
                          SERVER_LIST.add(builds.value)
                        }
                    }
                    env.selected_environment = input  message: 'Select environment ',ok : 'Proceed',id :'tag_id',
                                                parameters:[choice(choices: SERVER_LIST, description: 'Select environment', name: 'env')]
                    env.credId= "SSH_"+env.selected_environment
                }

                echo "Deploying ${env.selected_environment}."
              }
         }
      }
      stage('Checkout') {
        when {
               expression { env.CHECKOUT == 'true' }
        }
        steps {
               checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/PublicisSapient/PSknowHOW.git',credentialsId: 'githubcred']], branches: [[name: '${SBRANCH}']]], poll: false
        }
      }
      stage('Capture Version') {
          steps {
                script {

                       if(params.BUILDTYPE == 'UPGRADE') {
                          env.version = params.VERSION
                          echo "${env.version}"

                       }else {
                              def pom = readMavenPom file: 'pom.xml'
                              env.version = pom.version
                              echo "${pom.version}"
                              echo "${env.version}"

                              if(env.version.contains("SNAPSHOT") && env.CHOOSE_DEFAULT_REGISTRY == 'true') {
                                  env.version=env.version.replaceAll("-SNAPSHOT","")
                              }

                              echo "final version ::: ${env.version}"
                       }

                }
           }
      }
	  stage('Capture Instance Role'){
		steps {
			script{
				if(params.BUILDTYPE == 'UPGRADE'){
				  env.SERVER_ROLE = 'UNKNOWN'
				  echo "Will get the server role from DB before deployment"
                } else {
				   if(params.SERVER_ROLE == 'Producer'){
						env.SERVER_ROLE = 'PRODUCER'
				   } else {
						env.SERVER_ROLE = 'CONSUMER'
				   }

				}
			echo "SERVER_ROLE ::: ${env.SERVER_ROLE}"
			}
		}
	  }
	  stage('Fresh Installation - pre-check on Sape Cloud') {
            when{
                expression { env.DEPLOY == 'true' && params.API_DEPLOYMENT == true  && params.BUILDTYPE != 'MIGRATION'  && params.BUILDTYPE != 'UPGRADE' && params.CERT_PATH.isEmpty()}
            }
            steps {
                    withCredentials([
                           usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')
                    ]) {
                          sh """
                                > /tmp/customapi_hosts
                                echo "[server]" > /tmp/customapi_hosts
                                echo " ${env.selected_environment}" >> /tmp/customapi_hosts
                                #cd ansible_deployment/
                                #ansible-playbook -i /tmp/customapi_hosts playbooks/freshinstallation-precheck.yml  -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e "selected_server=${env.selected_environment}" -e 'repository_name=${env.REGISTRY_REPOSITORY}'  -e "select_docker_registry=${env.select_docker_registry}" -e "version=${env.version}"  --extra-vars 'ansible_ssh_pass=${SERVER_PASSWORD}' --extra-vars='ansible_ssh_user=${env.SERVER_USER_DETAILS}' -e "verticalIds=${env.VERTICALS}" -e "instance_role=${env.SERVER_ROLE}" -e "OLD_VERSION=${env.FROMVERSION}"
                           """
                       }
                    }
      }
      stage('Deploy on Sape Cloud') {
        when{
            expression { env.DEPLOY == 'true' && params.API_DEPLOYMENT == true  && params.BUILDTYPE != 'MIGRATION' && params.CERT_PATH.isEmpty()}
        }
        steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']]){
                      sh """
                            > /tmp/customapi_hosts
                            echo "[server]" > /tmp/customapi_hosts
                            echo " ${env.selected_environment}" >> /tmp/customapi_hosts
                            cd ansible_deployment/
                            ansible-playbook -i /tmp/customapi_hosts playbooks/deploy-project.yaml -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'MONGO_CONNECTION=${MONGO_CONNECTION}' -e 'ldapurl2=${ldapurl2}' -e 'edcurl=${edcurl}' -e 'ldapurl=${ldapurl}' -e 'DNS_NAME=${DNS_NAME}' -e 'BUILDTYPE=${BUILDTYPE}' -e 'VERSION=${VERSION}' -e 'fromversion=${fromversion}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e "selected_server=${env.selected_environment}" -e 'repository_name=${env.REGISTRY_REPOSITORY}'  -e "select_docker_registry=${env.select_docker_registry}" -e "version=${env.version}"  --extra-vars 'ansible_ssh_pass=${SERVER_PASSWORD}' --extra-vars='ansible_ssh_user=${env.SERVER_USER_DETAILS}' -e "verticalIds=${env.VERTICALS}" -e "instance_role=${env.SERVER_ROLE}" -e "OLD_VERSION=${env.FROMVERSION}"

                       """
                   }
                }
      }
      stage('Deploy on Public Cloud') {
        when{
            expression { env.DEPLOY == 'true' && params.API_DEPLOYMENT == true  && params.BUILDTYPE != 'MIGRATION' && !params.CERT_PATH.isEmpty()}
        }
        steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']]){
                      sh """
                            > /tmp/customapi_hosts
                            echo "[server]" > /tmp/customapi_hosts
                            echo " ${env.selected_environment}" >> /tmp/customapi_hosts
                            cd ansible_deployment/
                            chmod 400 /var/jenkins_home/PEMFiles/${CERT_PATH}
                            ansible-playbook -i /tmp/customapi_hosts playbooks/deploy-project.yaml -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'DNS_NAME=${DNS_NAME}' -e 'BUILDTYPE=${BUILDTYPE}' -e 'VERSION=${VERSION}' -e 'fromversion=${fromversion}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e "selected_server=${env.selected_environment}" -e 'repository_name=${env.REGISTRY_REPOSITORY}'  -e "select_registry=${env.select_docker_registry}" -e "version=${env.version}" --user ${env.SERVER_USER_DETAILS} --private-key=/var/jenkins_home/PEMFiles/${CERT_PATH}  -e "verticalIds=${env.VERTICALS}" -e "instance_role=${env.SERVER_ROLE}" -e "OLD_VERSION=${env.FROMVERSION}"
                       """
                   }
                }
      }
      stage('Migrate Producer on SAPE Cloud') {
        when{
            expression { params.BUILDTYPE == 'MIGRATION' && env.DEPLOY == 'true' && params.API_DEPLOYMENT == true && params.CERT_PATH.isEmpty() }
        }
        steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']]) {
                      sh """
                            > /tmp/customapi_hosts
                            echo "[server]" > /tmp/customapi_hosts
                            echo " ${env.selected_environment}" >> /tmp/customapi_hosts
                            cd ansible_deployment/
                            ansible-playbook -i /tmp/customapi_hosts playbooks/migration.yaml -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'DNS_NAME=${DNS_NAME}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e "selected_server=${env.selected_environment}" -e 'repository_name=${env.REGISTRY_REPOSITORY}'  -e "select_docker_registry=${env.select_docker_registry}" -e "version=${env.version}" --extra-vars 'ansible_ssh_pass=${SERVER_PASSWORD}' --extra-vars='ansible_ssh_user=${env.SERVER_USER_DETAILS}' -e "verticalIds=${env.VERTICALS}"
                       """
                   }
                }
      }
      stage('Migrate Producer on Public Cloud') {
        when{
            expression { params.BUILDTYPE == 'MIGRATION' && env.DEPLOY == 'true' && params.API_DEPLOYMENT == true && !params.CERT_PATH.isEmpty() }
        }
        steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']]){
                      sh """
                            > /tmp/customapi_hosts
                            echo "[server]" > /tmp/customapi_hosts
                            echo " ${env.selected_environment}" >> /tmp/customapi_hosts
                            cd ansible_deployment/
                            chmod 400 /var/jenkins_home/PEMFiles/${CERT_PATH}
                            ansible-playbook -i /tmp/customapi_hosts playbooks/migration.yaml -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'DNS_NAME=${DNS_NAME}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e "selected_server=${env.selected_environment}" -e 'repository_name=${env.REGISTRY_REPOSITORY}'  -e "select_docker_registry=${env.select_docker_registry}" -e "version=${env.version}" --extra-vars='ansible_ssh_user=${env.SERVER_USER_DETAILS}'  --private-key=/var/jenkins_home/PEMFiles/${CERT_PATH}  -e "PRECALCULATED_DATA_SHOW=true"  -e "verticalIds=${env.VERTICALS}"
                       """
                   }
                }
      }
      stage('Notification'){
        when{
            expression { env.NOTIFICATION == 'true' }
        }
          steps {
              sh 'echo TODO NOTIFICATION'
          }
      }
   }
}
