---
- name: Deploying Components on Dev Server
  hosts: server
  become: true
  vars_files:
    - vars/defaults.yml
    - vars/app-common.yml
  pre_tasks:
    - name: Install required Packages for CentOS
      include_tasks: centos.yml
      when: (ansible_facts['distribution'] == 'CentOS') or (ansible_facts['distribution'] == 'RedHat')
      # ignore_errors: yes
      
    - name: Install required Packages for Ubuntu
      include_tasks: ubuntu.yml
      when: ansible_facts['distribution'] == 'Ubuntu'
      # ignore_errors: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  environment:
      OLD_VERSION: '{{ OLD_VERSION }}'

  tasks:
    - name: Setting environment Variable
      set_fact:
        MONGODB_IMAGE: mongodb-ps

    - name: Create executable files directory
      file: path=/var/knh state=directory mode=0755

    - name: Enable firewalld
      service: name=firewalld state=started enabled=yes
      ignore_errors: yes

    - name: Open ports
      command: firewall-cmd --add-port=8080/tcp --add-port=80/tcp --add-port=443/tcp --add-port=27017/tcp --add-port=2181/tcp --add-port=9092/tcp --permanent
      ignore_errors: yes

    - name: Bounce firewalld
      service: name=firewalld state=restarted
      ignore_errors: yes

    - name: Checking directory.
      stat:
        path: "{{ INSTALL_DIR }}"
      register: my_folder

    - name: "echo if directory already existed"
      debug:
        msg: "the {{ INSTALL_DIR }} directory is already existed"
      when: my_folder.stat.exists

    - name: Create {{ INSTALL_DIR }} Directory to Install kpidashboard
      file:
        path: "{{ INSTALL_DIR }}"
        state: directory
        recurse: true
        mode: 0755
      when: my_folder.stat.exists == false

    - name: Create {{ INSTALL_DIR }}/{{ PROJECT_NAME }} Directory for Project
      file:
        path: "{{ INSTALL_DIR }}/{{ PROJECT_NAME }}"
        state: directory
        recurse: true
        mode: 0755

    - name: Create Project Root Sub Directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        mode: 0755
      with_items:
        - "{{ PROJECT_ROOT_SUBDIRS }}"

    - name: Create Project Log Sub Directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        mode: 0755
      with_items:
        - "{{ ROOT_LOGS_SUBDIRS }}"

    - name: Create Offline Data  Sub Directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        mode: 0755
      with_items:
        - "{{ OFFLINE_DATA_SUBDIR }}"

    - name: Create Offline Data Excle Sub Directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        mode: 0755
      with_items:
        - "{{ OFFLINE_DATA_EXCEL }}"

    - name: Create Offline Data JSON  Sub Directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        mode: 0755
      with_items:
        - "{{ OFFLINE_DATA_JSON }}"

    - name: facts
      set_fact:
          version: "{{ VERSION | float}}"
          fromversion: "{{ fromversion | float}}"

    - name: Copy SSL / LDAP Certificate from S3 for All other users 
      aws_s3:
        aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
        aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
        bucket: knowhow-prod-backup
        object: "SSL-Certs/{{ item.src }}"
        dest: "/app/apps/certs/{{ item.dest }}"
        mode: get
      with_items:
        - {src: 'useselfsignedssl.flag', dest: 'useselfsignedssl.flag'}
        - {src: 'knowhowinstaller.cer', dest: 'knowhowinstaller.cer'}
        - {src: 'lladldap.hk.net.cer', dest: 'lladldap.hk.net.cer'}

    - name: Copy SSL / LDAP Certificate from S3 for Sapecloud and EDC server
      aws_s3:
        aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
        aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
        bucket: knowhow-prod-backup
        object: "SSL-Certs/{{ item.src }}"
        dest: "/app/apps/certs/{{ item.dest }}"
        mode: get
      with_items:
        - {src: 'knowhow.crt', dest: 'knowhow.crt'}
        - {src: 'knowhow.key', dest: 'knowhow.key'}
        - {src: 'useselfsignedssl.flag', dest: 'useselfsignedssl.flag'}
        - {src: 'knowhowinstaller.cer', dest: 'knowhowinstaller.cer'}
        - {src: 'lladldap.hk.net.cer', dest: 'lladldap.hk.net.cer'}
        - {src: 'jssecacerts.cer', dest: 'jssecacerts.cer'}
      when: (selected_server is match("81.200.188.")) or (selected_server is match("10.148.240."))

    - name: Create docker-compose.yml from compose-full-stack-latest.j2 Template
      template:
        src: templates/compose-full-stack-latest.j2
        dest: "{{ INSTALL_DIR }}/{{ PROJECT_NAME }}/docker-compose.yml"
        mode: 0644
      when:
        - MONGO_CONNECTION == "false"

    - name: Create docker-compose.yml from compose-dev.j2 Template
      template:
        src: templates/compose-dev.j2
        dest: "{{ INSTALL_DIR }}/{{ PROJECT_NAME }}/docker-compose.yml"
        mode: 0644
      when: MONGO_CONNECTION == "true" 
      
    - name: Copy required scripts file
      copy: src={{ item.src }} dest={{ item.dest }} mode=0755
      with_items:
        - {src: '../playbooks/dbbackup.sh', dest: '/var/knh/dbbackup.sh'}
        - {src: '../playbooks/cleanup.sh', dest: '/var/knh/cleanup.sh'}

    - name: Execute dbbackup script
      shell: /var/knh/dbbackup.sh
      ignore_errors: yes
        
    - name: Update crontab for dbbackup
      shell: ( crontab -u root -l; echo "0 23 * * 1-7 /var/knh/dbbackup.sh" ) | crontab -u root -
      ignore_errors: yes

    - name: Login to registry
      shell: "docker login -u {{ registry_username }} -p {{ registry_password }} {{ select_docker_registry }}"

    - name: Pull Containers using docker-compose command
      shell: "cd {{ INSTALL_DIR }}/{{ PROJECT_NAME }}/ && sudo docker-compose pull"

    - name: Shut down docker compose if running
      shell: "cd {{ INSTALL_DIR }}/{{ PROJECT_NAME }}/ && sudo docker-compose down"
      ignore_errors: yes

    - name: Run Containers using docker-compose command
      shell: "cd {{ INSTALL_DIR }}/{{ PROJECT_NAME }}/ && sudo docker-compose up -d"
      register: find_output
      
    - debug:
        var: find_output

    - name: Wait for applications to get up all
      wait_for:
        host: localhost
        port: "{{ item }}"
        state: started         # Port should be open
        delay: 0               # No wait before first check (sec)
        timeout: 300             # Stop checking after timeout (sec)
      ignore_errors: yes
      with_items:
        - 443
        - 80
        - 8080

    - name: Execute cleanup script
      shell: /var/knh/cleanup.sh
      ignore_errors: yes
      
    - name: Update crontab
      shell: ( crontab -u root -l; echo "0 * * * 2 /var/knh/cleanup.sh" ) | crontab -u root -
      ignore_errors: yes
    
    - name: copy certs_import.sh file for sape cloud
      copy:
        src: ../playbooks/certs_import.sh
        dest: /var/knh/certs_import.sh
        mode: 0755
      ignore_errors: yes
      when: 
        - selected_server is match("10.")
      
    - name: Execute certs_import  script for sape cloud
      shell: /var/knh/certs_import.sh {{edcurl}} {{ldapurl}}
      ignore_errors: yes
      when: 
        - selected_server is match("10.")

    - name: copy certs_edc_2.sh file for EDC
      copy:
        src: ../playbooks/cert_edc_2.sh
        dest: /var/knh/cert_edc_2.sh
        mode: 0755
      when:
        - selected_server is match("81.")

    - name: Execute certs_edc_2 script EDC
      shell: yes yes | ./cert_edc_2.sh {{ldapurl2}}
      args:
        chdir: /var/knh/
      when:
        - selected_server is match("81.")
      ignore_errors: yes
