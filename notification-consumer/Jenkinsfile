pipeline {
   agent any
   options {
        ansiColor('xterm')
    }
   environment {
     awss3credentialsid = "AWS_S3_CREDENTIALS"
     select_docker_registry = "${env.DEFAULT_REGISTRY}"
     registryCredId = "DOCKER_REGISTRY_CREDENTIALS"
      }
   parameters {
           gitParameter defaultValue: 'origin/master', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'
           booleanParam(name: 'BUILD', defaultValue: 'false', description: 'BUILD')
           booleanParam(name: 'SKIP_UNIT_TEST', defaultValue: 'false', description: 'SKIP UNIT TEST Cases')
           booleanParam(name: 'PUSH_REGISTRY', defaultValue: 'false', description: 'PUSH_REGISTRY')
           choice(name: 'DEPLOY', choices: ['', 'OPENSOURCE', 'PS-INTERNAL'], description: '')
	       string(name: 'DNS_NAME', defaultValue: '', description: 'If have provide')

   }
   stages {
      stage('Select Environment') {
         when {
             expression { env.DEPLOY }
         }
         steps {
              script {
                def SERVER_LIST=[]
                def buildStages = env.getEnvironment()
                for (builds in buildStages) {
                    if(builds.key.startsWith("SERVER_")) {
                      SERVER_LIST.add(builds.value)
                    }
                }
                env.selected_environment = input  message: 'Select environment ',ok : 'Proceed',id :'tag_id',
                parameters:[choice(choices: SERVER_LIST, description: 'Select environment', name: 'env')]
                echo "Deploying ${env.selected_environment}."
                env.credId= "SSH_"+env.selected_environment
              }
         }
      }
      stage('Checkout') {
        steps {
               checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/PublicisSapient/PSknowHOW.git',credentialsId: 'githubcred']], branches: [[name: '${SBRANCH}']]], poll: false
        }
      }
      stage('Capture Version') {
          steps {
                script {
                       def pom = readMavenPom file: 'pom.xml'
                       env.version = pom.version
                       echo "${pom.version}"
                       echo "${env.version}"
                       version = env.version
                }
           }
      }
      stage('Build CONSUMER skipping Unit Test') {
        when{
            expression { env.BUILD == 'true' }
            expression { env.SKIP_UNIT_TEST == 'true' }
        }
            steps {
                sh "mvn clean install -DskipTests -Pnotification-consumer"
            }
         }
         stage('Build CONSUMER run Unit Test') {
 		when{
            expression { env.BUILD == 'true' }
            expression { env.SKIP_UNIT_TEST == 'false' }
        }
            steps {
                sh "mvn clean install -Pnotification-consumer"
            }
      }

      stage('Push Registry') {
        when{
            expression { env.PUSH_REGISTRY == 'true' }
         }
         steps {
              withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
              sh """
                    docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                    docker tag notification-consumer:${env.version} ${env.select_docker_registry}/speedy/notification-consumer:${env.version}
                    docker push ${env.select_docker_registry}/speedy/notification-consumer:${env.version}
                    docker logout ${env.select_docker_registry}
                """
              }
          }
      }
      stage('Deploy') {
        when{
            expression { env.DEPLOY }
        }
          steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.awss3credentialsid, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                [$class: 'UsernamePasswordMultiBinding', credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']])
                 {
                        sh """
                            > /tmp/customapi_hosts
                            echo "[server]" > /tmp/customapi_hosts
                            echo " ${env.selected_environment}" >> /tmp/customapi_hosts
                            cd ansible_deployment/
                            ansible-playbook -i /tmp/customapi_hosts playbooks/deploy.yaml -e 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -e 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -e 'DEPLOY=${DEPLOY}' -e 'DNS_NAME=${DNS_NAME}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'select_docker_registry=${DEFAULT_REGISTRY}' -e 'version=${env.version}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}' -e 'edcurl=${edcurl}' -e 'ldapurl=${ldapurl}'
                        """
                }
            }
      }
   }
}
